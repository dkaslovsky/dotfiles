# this will prune git branches that have been merged and allows you to edit them before deleting them
# use :cq to exit vi with nonzero status to abort
gitprune() {
    if [ -z "$1" ]; then
        echo "must specify merge branch"
        return 1
    fi
    git branch --merged "$1" | grep -v master | grep -v '*' >/tmp/merged-branches && vi /tmp/merged-branches && xargs git branch -d </tmp/merged-branches; rm -f /tmp/merged-branches
}

# Git branch in prompt
git_branch() {
        branch="$(git branch 2>/dev/null | grep \* | awk -F '\\* ' '{$0=$2}1')"
        if [ ! -z "$branch" ]; then
                printf " [%s]" "$branch"
        fi
}

# Select the branch to checkout using fzf
gitcheckout() {
    # xargs trims leading whitespace
    local branch=$(git branch | fzf -1 | xargs | sed 's/^\* //')
    if [ ! -z "$branch" ]; then
        git checkout "$branch"
    fi
}

# Check git status on dotfiles
git_dotfiles() {
  gstatus=$(git -C $HOME/dotfiles status -s)
  if [ ! -z "$gstatus" ]; then
        echo "(resync dotfiles)"
  fi
}

alias gitl="git log --graph --date=format:'%Y-%m-%d-%H:%M' --pretty='format:%C(auto)%h %C(cyan)%ad %C(magenta)%an %C(auto)%s (%C(auto)%ar)'"


